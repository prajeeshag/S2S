#!Jinja2
{% from 'site.cylc' import initialCyclePoint, HMEMBERS, HYEARS, FMEMBERS, cycles, REFORECAST %}
{% from 'site.cylc' import FCSTDURATION, SITE, FORCING_DATA_DIR, finalCyclePoint, ADMIN_EMAILS %}

{% if graph is defined %}
    # For cylc graph set FMEMBERS = 2
    {% set FMEMBERS=2 %}
{% endif %}

[scheduler]
    install = fix/
    

[task parameters]
    mem = 0..{{ FMEMBERS - 1 }}
    memh = 0..{{ HMEMBERS - 1 }}
    rf = 1..{{ HYEARS }}
    acc2rate = RAINC, RAINNC
    vizfld = T2, RH2, Rainfall

[scheduling]
    initial cycle point = {{ initialCyclePoint }}
    final cycle point = {{ finalCyclePoint }}
    runahead limit = P30
    [[xtriggers]]
        clock_S2S = wall_clock(offset=P1DT2H00M)
    [[graph]]
        R1 = """
            installWrfWps
            installCondaPkgs # TODO: bring to core from include
            install7z
        """
{% if REFORECAST > 0 %}
    {% set members = '_F<mem>', '<rf><memh>' %}
{% else %}
    {% set members = '_F<mem>', %}
{% endif %}

{% for cycle in cycles %}
        {{cycle}} = """
{% for member in members %}
            installCondaPkgs[^] & @clock_S2S => get_forcing{{member}}
            get_forcing{{member}} & installWrfWps[^] => ungrib{{member}}
            ungrib{{member}} => metgrid{{member}} => real{{member}} => wrf{{member}}
            wrf{{member}} => merge_time{{member}} => acc2rate{{member}}<acc2rate> => submit_acc2rate<acc2rate>
            submit_acc2rate_RAINC & submit_acc2rate_RAINNC => rain{{member}} => submit_rain
            merge_time{{member}} => rh2{{member}} => submit_rh2

            #Visualization
            merge_time{{member}} & install7z[^] & installCondaPkgs[^] => viz<vizfld>
            submit_rain => viz_Rainfall
            submit_rh2 => viz_RH2
            viz<vizfld> => create_meta_data => push_data
# temporary stop            viz<vizfld> => plot_viz_data<vizfld>

            # Cleanup Intermediate files
            merge_time{{member}} => clean_up{{member}}
{% endfor %}

        """
{% endfor %}

[runtime]

    [[root]]
	execution retry delays = PT10M, PT2H
        [[[mail]]]
            to = {{ ADMIN_EMAILS }}
        [[[events]]]
            mail events = failed
        [[[environment]]]
            WPS_DIR=** site specific **
            WRF_DIR=** site specific **
            CYCLE_DIR=${CYLC_WORKFLOW_WORK_DIR}/${CYLC_TASK_CYCLE_POINT}
            CYCLE_SHARE_DIR=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
            ETC_DIR=${CYLC_WORKFLOW_RUN_DIR}/etc
            FIX_DIR=${CYLC_WORKFLOW_RUN_DIR}/fix
            FCST_START_TIME=${CYLC_TASK_CYCLE_POINT}
            FCSTDURATION={{FCSTDURATION}}

            iyyyy=${FCST_START_TIME:0:4}
            imm=${FCST_START_TIME:4:2}
            idd=${FCST_START_TIME:6:2}

            GEO_EM_FILE=$FIX_DIR/geo_em.d01.nc.S2S_4km_AG_24_flood

    [[install7z]]
        script = """
            mkdir -p ${CYLC_WORKFLOW_SHARE_DIR}/bin
            cd ${CYLC_WORKFLOW_SHARE_DIR}/bin
            wget https://www.7-zip.org/a/7z2408-linux-x64.tar.xz 
            tar -xvf 7z2408-linux-x64.tar.xz 
        """

    [[FORECAST_MEMBER]]
        [[[environment]]]
            SHARE_DIR=${CYCLE_SHARE_DIR}/F
            memN=$CYLC_TASK_PARAM_mem
            MEM_SHARE_DIR=${SHARE_DIR}/mem${memN}
            syyyy=$iyyyy

    [[REFORECAST_MEMBER]]
        [[[environment]]]
            memN=$CYLC_TASK_PARAM_memh
            rfN=$CYLC_TASK_PARAM_rf
            SHARE_DIR=${CYCLE_SHARE_DIR}/H/rf${rfN}
            MEM_SHARE_DIR=${SHARE_DIR}/mem${memN}
            syyyy=$(( $iyyyy - $rfN ))

    [[GET_FORCING]]
        script = """
            rm -rf *
            mkdir -p $MEM_SHARE_DIR
            get_forcing.sh -i $input_data -m $memN -o ungrib_input.grib --year $syyyy $lsm_input
            mv ungrib_input.grib $MEM_SHARE_DIR
            rm -rf *
        """

    [[get_forcing_F<mem>]]
        inherit = GET_FORCING, FORECAST_MEMBER
        [[[environment]]]
            input_data={{FORCING_DATA_DIR}}/A1F${iyyyy}${imm}${idd}/${iyyyy}${imm}${idd}.grb
            lsm_input=""

    [[get_forcing<rf><memh>]]
        inherit = GET_FORCING, REFORECAST_MEMBER
        [[[environment]]]
            input_data={{FORCING_DATA_DIR}}/A1H${iyyyy}${imm}${idd}/${iyyyy}${imm}${idd}.grb
            lsm_input="--lsminput {{FORCING_DATA_DIR}}/A1F${iyyyy}${imm}${idd}/${iyyyy}${imm}${idd}.grb"


    [[UNGRIB]]
        script = """
            rm -rf *
            source get_dates.sh
            mkdir -p $MEM_SHARE_DIR/metgrid_inputs
            envsub $ETC_DIR/namelist.wps namelist.wps
            envsub $ETC_DIR/Vtable Vtable
            ln_safe "$ungrib_dir" .
            $link_grib $MEM_SHARE_DIR/ungrib_input.grib .
            ./ungrib/ungrib.exe
            cat ungrib.log
            grep "Successful completion" ungrib.log
            mv FILE* $MEM_SHARE_DIR/metgrid_inputs
            rm -rf *
        """
        [[[environment]]]
            ungrib_dir=$WPS_DIR/ungrib
            link_grib=$WPS_DIR/link_grib.csh

    [[ungrib_F<mem>]]
        inherit = UNGRIB, FORECAST_MEMBER
    [[ungrib<rf><memh>]]
        inherit = UNGRIB, REFORECAST_MEMBER

    [[METGRID]]
        script = """
            rm -rf *
            source get_dates.sh
            mkdir -p $MEM_SHARE_DIR/real_inputs
            envsub $ETC_DIR/namelist.wps namelist.wps
            mkdir metgrid 

            #  Use metgrid table from Hari for better SST interpolation
            cp $ETC_DIR/METGRID.TBL.ARW metgrid/METGRID.TBL

            ln -sf $MEM_SHARE_DIR/metgrid_inputs/* .
            ln_safe $GEO_EM_FILE geo_em.d01.nc
            $run_cmd $metgrid_dir/metgrid.exe
            grep "Successful completion" metgrid.log
            mv met_em* $MEM_SHARE_DIR/real_inputs
            rm -rf *
        """
        [[[environment]]]
            metgrid_dir=$WPS_DIR/metgrid
            run_cmd = ** site specific **

    [[metgrid_F<mem>]]
        inherit = METGRID, FORECAST_MEMBER
    [[metgrid<rf><memh>]]
        inherit = METGRID, REFORECAST_MEMBER

    [[NAMELIST_INPUT]]
        [[[environment]]]
            time_step=20

    [[REAL]]
        inherit = None, NAMELIST_INPUT
        script = """
            rm -rf *
            source get_dates.sh
            mkdir -p $MEM_SHARE_DIR/wrf_input
            ln -sf $MEM_SHARE_DIR/real_inputs/* .
            # get the grid info from geo_em_file
            source grid_info.sh $GEO_EM_FILE
            envsub $ETC_DIR/namelist.input namelist.input
            envsub $ETC_DIR/iofields.txt iofields.txt 
            $run_cmd $real_exe
            mv wrf*_d?? $MEM_SHARE_DIR/wrf_input
            rm -rf *
        """
        [[[environment]]]
            nproc_x=-1
            nproc_y=-1
            nio_groups=0
            nio_tasks_per_group=0
            real_exe=$WRF_DIR/main/real.exe
            run_cmd = ** site specific **

    [[real_F<mem>]]
        inherit = REAL, FORECAST_MEMBER
    [[real<rf><memh>]]
        inherit = REAL, REFORECAST_MEMBER

    [[WRF]]
        inherit = None, NAMELIST_INPUT
        script = """
            rm -rf *
            source get_dates.sh
            mkdir -p $MEM_SHARE_DIR/wrf_out
            cp -f $em_real_dir/* .
            ln -sf $MEM_SHARE_DIR/wrf_input/* .

            # source the grid info from wrf_input
            source grid_info.sh $GEO_EM_FILE
            envsub $ETC_DIR/namelist.input namelist.input
            envsub $ETC_DIR/iofields.txt iofields.txt 
            $run_cmd $wrf_exe

            mv *_d??_????-??-??_* $MEM_SHARE_DIR/wrf_out
            rm -rf *
        """
        [[[environment]]]
            em_real_dir=$WRF_DIR/test/em_real
            wrf_exe=$WRF_DIR/main/wrf.exe
            run_cmd = ** site specific ** # run command: e.g. mpirun -n 4

    [[wrf_F<mem>]]
        inherit = WRF, FORECAST_MEMBER
    [[wrf<rf><memh>]]
        inherit = WRF, REFORECAST_MEMBER

    [[MERGE_TIME]]
        script = """
        mkdir -p $output_dir
        merge_time_split_var.sh -o $output_dir/surface_d01_ $input_dir/surface_d01_* 
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/wrf_out
            output_dir=$MEM_SHARE_DIR/merge_time
    
    [[merge_time_F<mem>]]
        inherit = MERGE_TIME, FORECAST_MEMBER
    [[merge_time<rf><memh>]]
        inherit = MERGE_TIME, REFORECAST_MEMBER

    [[SUBMIT_BATCH]]
        script = """
            rm -rf *
            for script in $CYCLE_SHARE_DIR/$scripts_dir/*.sh; do
                echo "bash $script && rm $script" >> command.lst
            done
            parallel --jobs ${NTASKS} < command.lst
        """
        [[[environment]]]

    [[ACC2RATE]]
        script = """
        scriptsdir=$CYCLE_SHARE_DIR/submit_acc2rate_${varname}/
        mkdir -p $scriptsdir
        jobscript=$scriptsdir/${CYLC_TASK_NAME}.sh
        echo "acc2rate.sh $input_dir/surface_d01_${varname}.nc $input_dir/surface_d01_${varname}_rate.nc" > $jobscript
        chmod +x $jobscript
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/merge_time
            varname=$CYLC_TASK_PARAM_acc2rate
    [[acc2rate_F<mem><acc2rate>]]
        inherit = ACC2RATE, FORECAST_MEMBER
    [[acc2rate<rf><memh><acc2rate>]]
        inherit = ACC2RATE, REFORECAST_MEMBER
    
    [[submit_acc2rate<acc2rate>]]
        inherit = None, SUBMIT_BATCH
        [[[environment]]]
            varname=$CYLC_TASK_PARAM_acc2rate
            scripts_dir=submit_acc2rate_${varname}

    [[RH2]]
        script = """
            scriptsdir=$CYCLE_SHARE_DIR/submit_rh2/
            mkdir -p $scriptsdir
            jobscript=$scriptsdir/${CYLC_TASK_NAME}.sh
            # RH=0.263*PSFC*Q2/exp(17.67*(T2-273.15)/(T2-29.65))
            echo "cdo -setattribute,RH2@description="Humidity" -setname,RH2  -div [ -mulc,0.263 -mul $PSFC $Q2 -exp [ -div [ -mulc,17.67 -subc,273.15 $T2 -subc,29.65 $T2 ] ] ] $RH" > $jobscript
            chmod +x $jobscript
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/merge_time
            PSFC=$input_dir/surface_d01_PSFC.nc
            T2=$input_dir/surface_d01_T2.nc
            Q2=$input_dir/surface_d01_Q2.nc
            RH=$input_dir/surface_d01_RH2.nc
    [[rh2_F<mem>]]
        inherit = RH2, FORECAST_MEMBER
    [[rh2<rf><memh>]]
        inherit = RH2, REFORECAST_MEMBER
    [[submit_rh2]]
        inherit = None, SUBMIT_BATCH
        [[[environment]]]
            scripts_dir=submit_rh2
    
    [[RAIN]]
        script = """
            set -x
            scriptsdir=$CYCLE_SHARE_DIR/submit_rain/
            mkdir -p $scriptsdir
            jobscript=$scriptsdir/${CYLC_TASK_NAME}.sh

            echo  "cdo -setname,RAIN_rate -add $input_dir/surface_d01_RAINC_rate.nc " \
                "$input_dir/surface_d01_RAINNC_rate.nc " \
                "$input_dir/surface_d01_RAIN_rate.nc "  > $jobscript
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/merge_time
    
    [[rain_F<mem>]]
        inherit = RAIN, FORECAST_MEMBER
    [[rain<rf><memh>]]
        inherit = RAIN, REFORECAST_MEMBER

    [[submit_rain]]
        inherit = None, SUBMIT_BATCH
        [[[environment]]]
            scripts_dir=submit_rain

    [[CLEAN_UP]]
        script = """
            cd $input_dir
            rm -rf wrf_out wrf_input metgrid_inputs real_inputs
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR
    
    [[clean_up_F<mem>]]
        inherit = CLEAN_UP, FORECAST_MEMBER
    [[clean_up<rf><memh>]]
        inherit = CLEAN_UP, REFORECAST_MEMBER

    [[VIZ]]
        # TODO: Hardcoded Reforecast
        script = """
            output_dir=${CYCLE_SHARE_DIR}/viz/${fieldname}/live
            mkdir -p $output_dir
            python -c 'import viz; viz.app()' ${fieldname} \
            "${CYCLE_SHARE_DIR}/F/mem*/merge_time/${input_file_name}" \
            "${CYCLE_SHARE_DIR}/H/rf*/mem*/merge_time/${input_file_name}"
            mv output/* $output_dir
            rm -rf *
        """
        [[[environment]]]
            fieldname=
            input_file_name=

    [[viz<vizfld>]]
        inherit = None, VIZ
        [[[environment]]]
            fieldname=$CYLC_TASK_PARAM_vizfld
            input_file_name=surface_d01_${CYLC_TASK_PARAM_vizfld}.nc

    [[viz_Rainfall]]
        inherit = None, VIZ
        [[[environment]]]
            fieldname=Rainfall
            input_file_name=surface_d01_RAIN_rate.nc

    [[create_meta_data]]
        script="""
            cd ${CYCLE_SHARE_DIR}/viz/
            create_meta_data.sh
        """
    
    [[push_data]]
        script = """
            echo "Push data to vizualization server"
        """
        [[[events]]]
            mail events = succeeded

    [[plot_viz_data<vizfld>]]
        script = """
            cd ${CYCLE_SHARE_DIR}/viz/
            python -c 'import plot_viz; plot_viz.app()' $fieldname/live/${fieldname}_weekmean ${fieldname}
        """
        [[[environment]]]
            fieldname=$CYLC_TASK_PARAM_vizfld

    [[plot_viz_data_Rainfall]]
        script = """
            cd ${CYCLE_SHARE_DIR}/viz/
            python -c 'import plot_viz; plot_viz.app()' $fieldname/live/Rainfall_weeksum Rainfall
        """
        [[[environment]]]
            fieldname=$CYLC_TASK_PARAM_vizfld

{% include 'include/' ~ SITE ~ '/flow.cylc' %}
